"use strict";!function(){function e(e){return new Promise(function(t,n){e.onsuccess=function(){t(e.result)},e.onerror=function(){n(e.error)}})}function t(t,n,o){var r,i=new Promise(function(i,u){e(r=t[n].apply(t,o)).then(i,u)});return i.request=r,i}function n(e,t,n){n.forEach(function(n){Object.defineProperty(e.prototype,n,{get:function(){return this[t][n]},set:function(e){this[t][n]=e}})})}function o(e,n,o,r){r.forEach(function(r){r in o.prototype&&(e.prototype[r]=function(){return t(this[n],r,arguments)})})}function r(e,t,n,o){o.forEach(function(o){o in n.prototype&&(e.prototype[o]=function(){return this[t][o].apply(this[t],arguments)})})}function i(e,n,o,r){r.forEach(function(r){r in o.prototype&&(e.prototype[r]=function(){return e=this[n],(o=t(e,r,arguments)).then(function(e){if(e)return new c(e,o.request)});var e,o})})}function u(e){this._index=e}function c(e,t){this._cursor=e,this._request=t}function s(e){this._store=e}function a(e){this._tx=e,this.complete=new Promise(function(t,n){e.oncomplete=function(){t()},e.onerror=function(){n(e.error)},e.onabort=function(){n(e.error)}})}function p(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new a(n)}function f(e){this._db=e}n(u,"_index",["name","keyPath","multiEntry","unique"]),o(u,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),i(u,"_index",IDBIndex,["openCursor","openKeyCursor"]),n(c,"_cursor",["direction","key","primaryKey","value"]),o(c,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(t){t in IDBCursor.prototype&&(c.prototype[t]=function(){var n=this,o=arguments;return Promise.resolve().then(function(){return n._cursor[t].apply(n._cursor,o),e(n._request).then(function(e){if(e)return new c(e,n._request)})})})}),s.prototype.createIndex=function(){return new u(this._store.createIndex.apply(this._store,arguments))},s.prototype.index=function(){return new u(this._store.index.apply(this._store,arguments))},n(s,"_store",["name","keyPath","indexNames","autoIncrement"]),o(s,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),i(s,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),r(s,"_store",IDBObjectStore,["deleteIndex"]),a.prototype.objectStore=function(){return new s(this._tx.objectStore.apply(this._tx,arguments))},n(a,"_tx",["objectStoreNames","mode"]),r(a,"_tx",IDBTransaction,["abort"]),p.prototype.createObjectStore=function(){return new s(this._db.createObjectStore.apply(this._db,arguments))},n(p,"_db",["name","version","objectStoreNames"]),r(p,"_db",IDBDatabase,["deleteObjectStore","close"]),f.prototype.transaction=function(){return new a(this._db.transaction.apply(this._db,arguments))},n(f,"_db",["name","version","objectStoreNames"]),r(f,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(e){[s,u].forEach(function(t){t.prototype[e.replace("open","iterate")]=function(){var t,n=(t=arguments,Array.prototype.slice.call(t)),o=n[n.length-1],r=this._store||this._index,i=r[e].apply(r,n.slice(0,-1));i.onsuccess=function(){o(i.result)}}})}),[u,s].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,t){var n=this,o=[];return new Promise(function(r){n.iterateCursor(e,function(e){e?(o.push(e.value),void 0===t||o.length!=t?e.continue():r(o)):r(o)})})})});var d={open:function(e,n,o){var r=t(indexedDB,"open",[e,n]),i=r.request;return i.onupgradeneeded=function(e){o&&o(new p(i.result,e.oldVersion,i.transaction))},r.then(function(e){return new f(e)})},delete:function(e){return t(indexedDB,"deleteDatabase",[e])}};"undefined"!=typeof module?(module.exports=d,module.exports.default=module.exports):self.idb=d}();let lastId=0;class DBHelper{static get DATABASE_URL(){const port=1337;return`http://localhost:${port}`}static fetchRestaurants(callback){if(!("indexedDB"in window)){console.log("IndexedDB is not supported on this browser");let xhr=new XMLHttpRequest;xhr.open("GET",`${DBHelper.DATABASE_URL}/restaurants`);xhr.onload=(()=>{if(xhr.status===200){const json=JSON.parse(xhr.responseText);const restaurants=json;callback(null,restaurants)}else{const error=`Request failed. Returned status of ${xhr.status}`;callback(error,null)}});xhr.send();return}idb.open("restaurants",1,function(upgradeDb){upgradeDb.createObjectStore("restaurants",{keyPath:"id"})}).then(function(db){var tx=db.transaction("restaurants","readonly");var dbStore=tx.objectStore("restaurants");dbStore.getAll().then(idbData=>{if(idbData&&idbData.length>0){callback(null,idbData)}else{let xhr=new XMLHttpRequest;xhr.open("GET",`${DBHelper.DATABASE_URL}/restaurants`);xhr.onload=(()=>{if(xhr.status===200){var tx=db.transaction("restaurants","readwrite");var dbStore=tx.objectStore("restaurants");const json=JSON.parse(xhr.responseText);console.log(json);json.forEach(element=>{dbStore.put(element)});dbStore.getAll().then(restaurants=>{callback(null,restaurants)})}else{const error=`Request failed. Returned status of ${xhr.status}`;callback(error,null)}});xhr.send()}})})}static fetchReviews(callback){if(!("indexedDB"in window)){console.log("IndexedDB is not supported on this browser");fetch(`${DBHelper.DATABASE_URL}/reviews`).then(response=>{const reviews=response.json();return reviews}).then(reviews=>{callback(null,reviews)}).catch(error=>{callback(error,null)})}else{idb.open("reviews",1,function(upgradeDb){upgradeDb.createObjectStore("reviews",{keyPath:"id"})}).then(function(db){var tx=db.transaction("reviews","readonly");var dbStore=tx.objectStore("reviews");dbStore.getAll().then(idbData=>{if(idbData&&idbData.length>0){callback(null,idbData)}else{fetch(`${DBHelper.DATABASE_URL}/reviews`).then(response=>{return response.json()}).then(reviews=>{var tx=db.transaction("reviews","readwrite");var dbStore=tx.objectStore("reviews");reviews.forEach(review=>{dbStore.put(review)});dbStore.getAll().then(reviews=>{callback(null,reviews)})}).catch(error=>{callback(error,null)})}})})}}static sendDeferredReviews(){console.log("sending deferred reviews");if("indexedDB"in window){idb.open("deferredReviews",1,function(upgradeDb){upgradeDb.createObjectStore("deferredReviews",{keyPath:"id"})}).then(function(db){var tx=db.transaction("deferredReviews","readwrite");var dbStore=tx.objectStore("deferredReviews");dbStore.getAll().then(idbData=>{if(idbData&&idbData.length>0){idbData.forEach(deferredReview=>{let name=deferredReview.name;let rating=deferredReview.rating;let comments=deferredReview.comments;let restaurant_id=deferredReview.restaurant_id;let data=new FormData;data.append("name",name);data.append("rating",rating);data.append("comments",comments);data.append("restaurant_id",restaurant_id);fetch(`${DBHelper.DATABASE_URL}/reviews`,{method:"POST",body:data}).then(response=>{return response.json()}).then(review=>{if("indexedDB"in window){idb.open("reviews",1,function(upgradeDb_1){upgradeDb_1.createObjectStore("reviews",{keyPath:"id"})}).then(function(db_1){var tx_1=db_1.transaction("reviews","readwrite");var dbStore_1=tx_1.objectStore("reviews");dbStore_1.put(review)})}}).catch(error=>{console.log(error);return})})}});dbStore.clear()})}}static saveReview(event,callback){event.preventDefault();let name=document.getElementById("name").value;let rating=document.getElementById("rating").value;let comments=document.getElementById("comments").value;let restaurant_id=document.getElementById("restaurant_id").value;let data=new FormData;data.append("name",name);data.append("rating",rating);data.append("comments",comments);data.append("restaurant_id",restaurant_id);let updatedAt=new Date;fetch(`${DBHelper.DATABASE_URL}/reviews`,{method:"POST",body:data}).then(response=>{return response.json()}).then(review=>{if("indexedDB"in window){idb.open("reviews",1,function(upgradeDb){upgradeDb.createObjectStore("reviews",{keyPath:"id"})}).then(function(db){var tx=db.transaction("reviews","readwrite");var dbStore=tx.objectStore("reviews");dbStore.put(review);callback(null,review)})}}).catch(()=>{const deferredReview={id:lastId+1,restaurant_id:restaurant_id,name:name,rating:rating,comments:comments,updatedAt:updatedAt,createdAt:updatedAt};lastId=deferredReview.id;console.log("offline DB store");if("indexedDB"in window){idb.open("deferredReviews",1,function(upgradeDb){upgradeDb.createObjectStore("deferredReviews",{keyPath:"id"})}).then(function(db){var tx=db.transaction("deferredReviews","readwrite");var dbStore=tx.objectStore("deferredReviews");dbStore.put(deferredReview);callback(null,deferredReview)})}else{callback("Your browser does not support this cool feature :(",null)}})}static fetchRestaurantById(id,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const restaurant=restaurants.find(r=>r.id==id);if(restaurant){callback(null,restaurant)}else{callback("Restaurant does not exist",null)}}})}static fetchReviewsByRestaurantId(id,callback){DBHelper.fetchReviews((error,reviews)=>{if(error){callback(error,null)}else{const revs=reviews.filter(r=>r.restaurant_id==id);if(revs){callback(null,revs)}else{callback("Restaurant does not have reviews yet",null)}}})}static fetchRestaurantByCuisine(cuisine,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const results=restaurants.filter(r=>r.cuisine_type==cuisine);callback(null,results)}})}static fetchRestaurantByNeighborhood(neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const results=restaurants.filter(r=>r.neighborhood==neighborhood);callback(null,results)}})}static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{let results=restaurants;if(cuisine!="all"){results=results.filter(r=>r.cuisine_type==cuisine)}if(neighborhood!="all"){results=results.filter(r=>r.neighborhood==neighborhood)}callback(null,results)}})}static fetchNeighborhoods(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood);const uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i);callback(null,uniqueNeighborhoods)}})}static fetchCuisines(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type);const uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i);callback(null,uniqueCuisines)}})}static urlForRestaurant(restaurant){return`./restaurant.html?id=${restaurant.id}`}static imageUrlForRestaurant(restaurant){return`/img/${restaurant.photograph}.jpg`}static mapMarkerForRestaurant(restaurant,map){const marker=new google.maps.Marker({position:restaurant.latlng,title:restaurant.name,url:DBHelper.urlForRestaurant(restaurant),map:map,animation:google.maps.Animation.DROP});return marker}}let restaurants,neighborhoods,cuisines;var map;var markers=[];if(navigator.serviceWorker){navigator.serviceWorker.register("/sw.js").then(function(){console.log("serviceWorker registered")})}document.addEventListener("DOMContentLoaded",event=>{fetchNeighborhoods();fetchCuisines()});fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods((error,neighborhoods)=>{if(error){console.error(error)}else{self.neighborhoods=neighborhoods;fillNeighborhoodsHTML()}})});fillNeighborhoodsHTML=((neighborhoods=self.neighborhoods)=>{const select=document.getElementById("neighborhoods-select");neighborhoods.forEach(neighborhood=>{const option=document.createElement("option");option.innerHTML=neighborhood;option.value=neighborhood;option.setAttribute("aria-label",neighborhood);select.append(option)})});fetchCuisines=(()=>{DBHelper.fetchCuisines((error,cuisines)=>{if(error){console.error(error)}else{self.cuisines=cuisines;fillCuisinesHTML()}})});fillCuisinesHTML=((cuisines=self.cuisines)=>{const select=document.getElementById("cuisines-select");cuisines.forEach(cuisine=>{const option=document.createElement("option");option.innerHTML=cuisine;option.value=cuisine;option.setAttribute("aria-label",cuisine);select.append(option)})});window.initMap=(()=>{let loc={lat:40.722216,lng:-73.987501};self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:loc,scrollwheel:false});updateRestaurants()});updateRestaurants=(()=>{const cSelect=document.getElementById("cuisines-select");const nSelect=document.getElementById("neighborhoods-select");const cIndex=cSelect.selectedIndex;const nIndex=nSelect.selectedIndex;const cuisine=cSelect[cIndex].value;const neighborhood=nSelect[nIndex].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,(error,restaurants)=>{if(error){console.error(error)}else{resetRestaurants(restaurants);fillRestaurantsHTML()}})});resetRestaurants=(restaurants=>{self.restaurants=[];const ul=document.getElementById("restaurants-list");ul.innerHTML="";self.markers.forEach(m=>m.setMap(null));self.markers=[];self.restaurants=restaurants});fillRestaurantsHTML=((restaurants=self.restaurants)=>{const ul=document.getElementById("restaurants-list");restaurants.forEach(restaurant=>{ul.append(createRestaurantHTML(restaurant))});addMarkersToMap()});createRestaurantHTML=(restaurant=>{const li=document.createElement("li");const image=document.createElement("img");image.className="restaurant-img";image.src=DBHelper.imageUrlForRestaurant(restaurant);image.alt=restaurant.name+" Restaurant";image.onload="lzld(this)";image.onerror="lzld(this)";li.append(image);const name=document.createElement("h2");name.innerHTML=restaurant.name;li.append(name);const neighborhood=document.createElement("p");neighborhood.innerHTML=restaurant.neighborhood;li.append(neighborhood);const address=document.createElement("p");address.innerHTML=restaurant.address;li.append(address);const more=document.createElement("a");more.innerHTML="View Details";more.href=DBHelper.urlForRestaurant(restaurant);more.title=restaurant.name;li.append(more);const like=document.createElement("button");like.value=restaurant.id;like.innerHTML="♥";let color=restaurant.is_favorite=="true"?"yellow":"black";like.style=`font-size: 24px; color: ${color}; background: transparent; border: none;`;like.addEventListener("click",()=>{let is_favorite=color==="black";fetch(`${DBHelper.DATABASE_URL}/restaurants/${restaurant.id}/?is_favorite=${is_favorite}`,{method:"PUT"}).then(response=>{return response.json()}).then(newRestaurant=>{color=newRestaurant.is_favorite==="true"?"yellow":"black";like.style=`font-size: 24px; color: ${color};  background: transparent; border: none;`})});li.append(like);return li});addMarkersToMap=((restaurants=self.restaurants)=>{restaurants.forEach(restaurant=>{const marker=DBHelper.mapMarkerForRestaurant(restaurant,self.map);google.maps.event.addListener(marker,"click",()=>{window.location.href=marker.url});self.markers.push(marker)})});